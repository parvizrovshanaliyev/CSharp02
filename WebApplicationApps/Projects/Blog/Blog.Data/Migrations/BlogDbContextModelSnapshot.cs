// <auto-generated />
using System;
using Blog.Data.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Blog.Data.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    partial class BlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Blog.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modified_by_name");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modified_by_name");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<int>("PostId")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_comments_post_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer")
                        .HasColumnName("comment_count");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modified_by_name");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("seo_author");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("seo_description");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("seo_tags");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("integer")
                        .HasColumnName("views_count");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_posts_category_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_posts_user_id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "Identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Category_Create",
                            NormalizedName = "CATEGORY_CREATE"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Category_Read",
                            NormalizedName = "CATEGORY_READ"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Category_Update",
                            NormalizedName = "CATEGORY_UPDATE"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Category_Delete",
                            NormalizedName = "CATEGORY_DELETE"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Post_Create",
                            NormalizedName = "POST_CREATE"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Post_Read",
                            NormalizedName = "POST_READ"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Post_Update",
                            NormalizedName = "POST_UPDATE"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Post_Delete",
                            NormalizedName = "POST_DELETE"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "User_Create",
                            NormalizedName = "USER_CREATE"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "User_Read",
                            NormalizedName = "USER_READ"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "User_Update",
                            NormalizedName = "USER_UPDATE"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "User_Delete",
                            NormalizedName = "USER_DELETE"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Role_Create",
                            NormalizedName = "ROLE_CREATE"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Role_Read",
                            NormalizedName = "ROLE_READ"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Role_Update",
                            NormalizedName = "ROLE_UPDATE"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Role_Delete",
                            NormalizedName = "ROLE_DELETE"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Comment_Create",
                            NormalizedName = "COMMENT_CREATE"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Comment_Read",
                            NormalizedName = "COMMENT_READ"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Comment_Update",
                            NormalizedName = "COMMENT_UPDATE"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "Comment_Delete",
                            NormalizedName = "COMMENT_DELETE"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "AdminArea_Home_Read",
                            NormalizedName = "ADMINAREA_HOME_READ"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyStamp = "e654aabb-22f6-44c2-ac8b-189b01d33ebc",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Blog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", "Identity");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AboutMe")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("about_me");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("facebook_link");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("GitHubLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("git_hub_link");

                    b.Property<string>("InstagramLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("instagram_link");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("last_name");

                    b.Property<string>("LinkedInLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("linked_in_link");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("TwitterLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("twitter_link");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.Property<string>("WebsiteLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("website_link");

                    b.Property<string>("YoutubeLink")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("youtube_link");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "Identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Avatar = "Users/defaultUser.png",
                            ConcurrencyStamp = "c6480f99-28db-420a-8705-d73984f5a321",
                            Email = "adminUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAECZ3evZybc2+jwI/rgLZcXLksi70+f95fAFk1btLRTeflu3VRJiZSwRavydlxFEM4w==",
                            PhoneNumber = "+9949999999",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3317689B-4358-4F80-874E-D8B6EAEF0AE4",
                            TwoFactorEnabled = false,
                            UserName = "adminUser"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Avatar = "Users/defaultUser.png",
                            ConcurrencyStamp = "a171912d-6895-4bf2-bbc1-5855160d9dde",
                            Email = "editorUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Editor",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITORUSER@GMAIL.COM",
                            NormalizedUserName = "EDITORUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEAIrXFhINk5oelO9lMZdlQsBPGBQ3m0H2xRcMg25TZoCRLKIOA+BGjL/rQCINCyPGw==",
                            PhoneNumber = "+9949999999",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3FFDA2C7-A349-4902-AC11-6FFAB9969424",
                            TwoFactorEnabled = false,
                            UserName = "editorUser"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Avatar = "Users/defaultUser.png",
                            ConcurrencyStamp = "2684fb06-4389-4e22-b936-c3c359c585a7",
                            Email = "memberUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Member",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBERUSER@GMAIL.COM",
                            NormalizedUserName = "MEMBERUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEKObRemZ3RdV7kc3K0hpWYmyF2qWSK5plh9i4/xHJcS452PfBCDtIsg5WuooqxGAKQ==",
                            PhoneNumber = "+9949999999",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "075E56DF-300D-4AF1-952E-951A18322EE1",
                            TwoFactorEnabled = false,
                            UserName = "memberUser"
                        });
                });

            modelBuilder.Entity("Blog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", "Identity");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", "Identity");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", "Identity");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 8
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 9
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 10
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 11
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 12
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 13
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 14
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 15
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 16
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 17
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 18
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 19
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 20
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 21
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 22
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 8
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 17
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 18
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 19
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 20
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 21
                        });
                });

            modelBuilder.Entity("Blog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", "Identity");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("Blog.Entities.Concrete.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("fk_comments_posts_post_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blog.Entities.Concrete.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_comments_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.Post", b =>
                {
                    b.HasOne("Blog.Entities.Concrete.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_posts_categories_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entities.Concrete.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_posts_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("Blog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("Blog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("Blog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("Blog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("Blog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Blog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
